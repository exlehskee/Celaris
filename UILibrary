--// Celaris UI Library â€“ Futuristic Executor UI
--// Built for loadstring() usage with RightControl keybind

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local Library = {}
local UIS = UserInputService
local CoreGui = game:GetService("CoreGui")
local ToggleKey = Enum.KeyCode.RightControl

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CelarisUILib"
ScreenGui.Parent = CoreGui
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true

local Visible = true

UIS.InputBegan:Connect(function(input, gpe)
	if not gpe and input.KeyCode == ToggleKey then
		Visible = not Visible
		ScreenGui.Enabled = Visible
	end
end)

local function MakeDraggable(frame)
	local dragToggle = false
	local dragInput, dragStart, startPos

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	RunService.RenderStepped:Connect(function()
		if dragToggle and dragInput then
			local delta = dragInput.Position - dragStart
			frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end

function Library:CreateWindow(title)
	local Main = Instance.new("Frame")
	Main.Size = UDim2.new(0, 600, 0, 400)
	Main.Position = UDim2.new(0.5, -300, 0.5, -200)
	Main.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
	Main.BorderSizePixel = 0
	Main.ClipsDescendants = true
	Main.Parent = ScreenGui

	local UICorner = Instance.new("UICorner", Main)
	UICorner.CornerRadius = UDim.new(0, 8)

	MakeDraggable(Main)

	local TabHolder = Instance.new("Frame")
	TabHolder.Size = UDim2.new(0, 120, 1, 0)
	TabHolder.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
	TabHolder.BorderSizePixel = 0
	TabHolder.Parent = Main

	local ContentHolder = Instance.new("Frame")
	ContentHolder.Position = UDim2.new(0, 120, 0, 0)
	ContentHolder.Size = UDim2.new(1, -120, 1, 0)
	ContentHolder.BackgroundTransparency = 1
	ContentHolder.Name = "ContentHolder"
	ContentHolder.Parent = Main

	local TabList = Instance.new("UIListLayout", TabHolder)
	TabList.SortOrder = Enum.SortOrder.LayoutOrder

	return setmetatable({Main = Main, Tabs = {}, Content = ContentHolder, TabButtons = {}, TabFrame = TabHolder}, {__index = Library})
end

function Library:CreateTab(window, name)
	local Button = Instance.new("TextButton")
	Button.Size = UDim2.new(1, 0, 0, 40)
	Button.Text = name
	Button.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
	Button.TextColor3 = Color3.new(1, 1, 1)
	Button.BorderSizePixel = 0
	Button.Font = Enum.Font.Gotham
	Button.TextSize = 14
	Button.AutoButtonColor = false
	Button.Parent = window.TabFrame

	local Corner = Instance.new("UICorner", Button)
	Corner.CornerRadius = UDim.new(0, 4)

	local TabContent = Instance.new("ScrollingFrame")
	TabContent.Size = UDim2.new(1, 0, 1, 0)
	TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
	TabContent.BackgroundTransparency = 1
	TabContent.ScrollBarThickness = 4
	TabContent.Visible = false
	TabContent.Parent = window.Content

	local UIList = Instance.new("UIListLayout", TabContent)
	UIList.SortOrder = Enum.SortOrder.LayoutOrder
	UIList.Padding = UDim.new(0, 6)

	table.insert(window.Tabs, TabContent)
	window.TabButtons[Button] = TabContent

	Button.MouseButton1Click:Connect(function()
		for _, t in pairs(window.Tabs) do
			t.Visible = false
		end
		for btn, frame in pairs(window.TabButtons) do
			btn.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
		end
		Button.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
		TabContent.Visible = true
	end)

	if #window.Tabs == 1 then
		Button.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
		TabContent.Visible = true
	end

	return TabContent
end

function Library:CreateButton(tab, text, callback)
	local Button = Instance.new("TextButton")
	Button.Size = UDim2.new(1, -10, 0, 36)
	Button.Position = UDim2.new(0, 5, 0, 0)
	Button.Text = text
	Button.Font = Enum.Font.Gotham
	Button.TextSize = 14
	Button.TextColor3 = Color3.new(1, 1, 1)
	Button.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
	Button.BorderSizePixel = 0
	Button.AutoButtonColor = false
	Button.Parent = tab

	local Corner = Instance.new("UICorner", Button)
	Corner.CornerRadius = UDim.new(0, 6)

	Button.MouseButton1Click:Connect(function()
		pcall(callback)
	end)
end

function Library:CreateToggle(tab, text, default, callback)
	local Holder = Instance.new("Frame")
	Holder.Size = UDim2.new(1, -10, 0, 36)
	Holder.Position = UDim2.new(0, 5, 0, 0)
	Holder.BackgroundTransparency = 1
	Holder.Parent = tab

	local Label = Instance.new("TextLabel")
	Label.Size = UDim2.new(1, -46, 1, 0)
	Label.Text = text
	Label.TextColor3 = Color3.new(1, 1, 1)
	Label.TextXAlignment = Enum.TextXAlignment.Left
	Label.Font = Enum.Font.Gotham
	Label.TextSize = 14
	Label.BackgroundTransparency = 1
	Label.Parent = Holder

	local Toggle = Instance.new("TextButton")
	Toggle.Size = UDim2.new(0, 36, 0, 20)
	Toggle.Position = UDim2.new(1, -36, 0.5, -10)
	Toggle.Text = ""
	Toggle.BackgroundColor3 = default and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(50, 50, 60)
	Toggle.BorderSizePixel = 0
	Toggle.Parent = Holder

	local UICorner = Instance.new("UICorner", Toggle)
	UICorner.CornerRadius = UDim.new(1, 0)

	local state = default

	Toggle.MouseButton1Click:Connect(function()
		state = not state
		TweenService:Create(Toggle, TweenInfo.new(0.2), {
			BackgroundColor3 = state and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(50, 50, 60)
		}):Play()
		pcall(callback, state)
	end)
end

-- You can extend from here with CreateSlider, CreateTextbox, CreateLabel, etc.

return Library
